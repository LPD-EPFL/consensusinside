#ifndef _T_Principal_h
#define _T_Principal_h 1

#include <string.h>
#include <sys/time.h>
#include "types.h"
//#include "T_Cryptography.h"
#include "Traces.h"

//extern "C"
//{
//#include "umac.h"
//}
class T_Node;
//class rabin_pub;

class T_Principal
{
	public:
		T_Principal(int i, int num_principals, Addr a, char *p);
		//Added by Maysam Yabandeh
		T_Principal(int i, int num_principals, Addr a, char* ip, int port, char *p);
		// Effects: Creates a new Principal object.

		virtual ~T_Principal();
		// Effects: Deallocates all the storage associated with principal.

		int pid() const;
		// Effects: Returns the principal identifier.

		const Addr *address() const;
		// Effects: Returns a pointer to the principal's address.


		unsigned int sig_size() const;
		// Effects: Returns the size of signatures generated by this principal.

//Added by Maysam Yabandeh
      int remotefd;
		int port;
		char ip[100];

	private:
		int id;
		Addr addr;
		//rabin_pub *pkey;
		//int ssize;                // signature size

		// UMAC contexts used to generate MACs for incoming and outgoing messages
		//umac_ctx_t* ctxs;

		//static long long umac_nonce;

};

inline const Addr *T_Principal::address() const
{
	return &addr;
}

inline int T_Principal::pid() const
{
	return id;
}

//inline bool T_Principal::verify_mac(const char *src, unsigned src_len,
		//const char *mac)
//{
	//return verify_mac(src, src_len, mac+T_UNonce_size, mac);
//}

//inline void T_Principal::gen_mac(const char *src, unsigned src_len, char *dst,
		//int dest_pid)
//{
	//++umac_nonce;
	//memcpy(dst, (char*)&umac_nonce, T_UNonce_size);
	//dst += T_UNonce_size;
	//gen_mac(src, src_len, dst, dest_pid, (char*)&umac_nonce);
//}

inline unsigned int T_Principal::sig_size() const { return 0; }

#endif // _T_Principal_h
